// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SavedItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(uuid())
  name               String?
  username           String?
  email              String     @unique
  image              String?
  hashedPassword     String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relationships
  savedItems         SavedItem[]
  orders             Order[]
  addresses          ShippingAddress[]
}

model Product {
  id                String   @id @default(uuid())
  slug              String   @unique
  coverImage        String?
  productName       String
  productTypeId     String?
  productWeightId   String?
  productType       String?
  productWeight      String?
  availability      String
  price             Float
  quantity          Int @default(0)
  refiner           String?
  material          String?
  fineness          String?
  fineWeight        String?
  dimensions        String?
  quality           String?
  packaging         String?
  kinebar           String?
  description       String?
  shots             String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  type              ProductType?    @relation(fields: [productTypeId], references: [id], onDelete: SetNull)
  weight            ProductWeight?  @relation(fields: [productWeightId], references: [id], onDelete: SetNull)
  storageLocations  ProductStorageLocation[]
  savedItems        SavedItem[]
  orders            OrderProduct[]
}

model ProductWeight {
  id        String   @id @default(uuid())
  weight    Float
  unit      String
  textId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  products Product[]
}

model ProductType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  textId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  products Product[]
}

model StorageLocation {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  address     String?
  capacity    Int?
  coordinates Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  productStorageLocations ProductStorageLocation[]
  storageBookings         StorageBooking[]
}

model ProductStorageLocation {
  id                String           @id @default(uuid())
  productId         String?
  storageLocationId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relationships
  product           Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  storageLocation   StorageLocation? @relation(fields: [storageLocationId], references: [id], onDelete: Cascade)

  @@unique([productId, storageLocationId])
}

model StorageBooking {
  id                String   @id @default(uuid())
  name              String
  email             String
  phone             String
  dateOfBirth       DateTime
  address           String
  zipCodeCity       String
  message           String?
  storageLocationId String?
  idFile            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  storageLocation   StorageLocation? @relation(fields: [storageLocationId], references: [id], onDelete: SetNull)
}

model OrderProduct {
  id          String   @id @default(uuid())
  orderId     String
  productId   String
  quantity     Int @default(1)
  price       Float
  total       Float

  // Relationships
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                 String          @id @default(uuid())
  userId             String
  phone              String
  email              String
  shippingAddressId  String @unique // Add @unique for one-to-one relationship
  paymentMethodId    String?
  subtotal           Float
  taxes              Float
  total              Float
  estimatedDelivery  DateTime
  createdAt          DateTime        @default(now())

  // Relationships
  user               User            @relation(fields: [userId], references: [id])
  paymentMethod      PaymentMethod?  @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)
  shippingInfo       ShippingAddress? @relation(fields: [shippingAddressId], references: [id]) // Define `references` only here
  products           OrderProduct[]
}

model ShippingAddress {
  id            String   @id @default(uuid())
  userId        String
  firstName     String
  lastName      String
  address       String
  apartment     String?
  city          String
  state         String
  postalCode    String
  country       String
  addressTypeId String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders         Order[]
   addressType   AddressType  @relation(fields: [addressTypeId], references: [id], onDelete: Cascade)

}


model AddressType {
  id          String   @id @default(uuid())
  type        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  addresses   ShippingAddress[]
}

model PaymentMethod {
  id          String   @id @default(uuid())
  method      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orders      Order[]
}
