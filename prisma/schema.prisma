// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  name               String?
  username           String?
  email              String   @unique
  image              String?
  hashedPassword     String?  // To store hashed passwords for local authentication
  passwordResetToken String? // Token for resetting the password
  passwordResetExpires DateTime? // Expiration time for the reset token
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Product {
  id            String       @id @default(uuid())
  slug          String       @unique
  coverImage    String
  productName   String
  productTypeId String       // Foreign key to ProductType
  availability  String
  price         Float
  refiner       String
  material      String
  fineness      String
  fineWeight    String
  dimensions    String
  quality       String
  packaging     String
  kinebar       String
  description   String
  shots         String[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // One-to-many relation to ProductWeight
  productWeights ProductWeight[]

  // Foreign key relation to ProductType
  productType   ProductType @relation(fields: [productTypeId], references: [id])
}
model ProductWeight {
  id        String   @id @default(uuid()) // Unique ID for the weight record
  productId String   // Foreign key to Product
  weight    Float    // The weight of the product
  unit      String   // Unit of weight (e.g., kg, g, lb)
  textId    String   // Additional text ID field
  createdAt DateTime @default(now()) // Timestamp of when the weight record was created
  updatedAt DateTime @updatedAt // Timestamp of the last update

  // Foreign key relation to Product
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId]) // Index for better performance when querying by productId
}

model ProductType {
  id          String    @id @default(uuid())  // Unique ID for each product type
  name        String    @unique               // Name of the product type (e.g., "Electronics", "Jewelry")
  description String?   // Optional description of the product type
  textId      String    // Additional text ID field
  createdAt   DateTime  @default(now())        // Timestamp when the product type is created
  updatedAt   DateTime  @updatedAt             // Timestamp when the product type is updated

  // One-to-many relation to Product
  products    Product[] // A product type can have multiple products

  @@index([name]) // Index for better performance when querying by name
}
