// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SavedItem {
  id        String   @id @default(uuid())       // Primary key
  userId    String                               // Foreign key to User
  productId String                               // Foreign key to Product
  createdAt DateTime @default(now())            // Timestamp for when the item was saved

  // Relationships
  user    User     @relation(fields: [userId], references: [id])   // Relation to User
  product Product  @relation(fields: [productId], references: [id]) // Relation to Product
}

model User {
  id                 String     @id @default(uuid())
  name               String?
  username           String?
  email              String     @unique
  image              String?
  hashedPassword     String?    // To store hashed passwords for local authentication
  passwordResetToken String?    // Token for resetting the password
  passwordResetExpires DateTime? // Expiration time for the reset token
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relationships
  savedItems         SavedItem[] // One-to-many relationship with SavedItem
}


model Product {
  id                String           @id @default(uuid()) // Primary key
  slug              String           @unique              // Unique slug for the product
  coverImage        String?                               // Cover image URL (optional)
  productName       String                                // Name of the product
  productTypeId     String?                               // Foreign key to ProductType (nullable)
  productWeightId   String?                               // Foreign key to ProductWeight (nullable)
  productType       String?                               // Foreign key to ProductType (nullable)
  productWeight     String?                               // Foreign key to ProductWeight (nullable)
  availability      String                                // Availability status
  price             Float                                 // Price of the product
  refiner           String?                               // Refiner details (optional)
  material          String?                               // Material of the product (optional)
  fineness          String?                               // Fineness of the material (optional)
  fineWeight        String?                               // Weight of the product in fine units (optional)
  dimensions        String?                               // Dimensions of the product (optional)
  quality           String?                               // Quality information (optional)
  packaging         String?                               // Packaging details (optional)
  kinebar           String?                               // Kinebar-related details (optional)
  description       String?                               // Product description (optional)
  shots             String[]                              // Array of image URLs (optional)
  createdAt         DateTime         @default(now())      // Timestamp for creation
  updatedAt         DateTime         @updatedAt           // Timestamp for last update

  // Relationships
  type              ProductType?    @relation(fields: [productTypeId], references: [id]) // Foreign key to ProductType (nullable)
  weight            ProductWeight?  @relation(fields: [productWeightId], references: [id]) // Foreign key to ProductWeight (nullable)
  storageLocations  ProductStorageLocation[] // Many-to-many relationship with StorageLocation
  savedItems        SavedItem[]              // One-to-many relationship with SavedItem
}


model ProductWeight {
  id        String   @id @default(uuid()) // Unique ID for the weight record
  weight    Float    // The weight of the product
  unit      String   // Unit of weight (e.g., kg, g, lb)
  textId    String   // Additional text ID field
  createdAt DateTime @default(now()) // Timestamp of creation
  updatedAt DateTime @updatedAt      // Timestamp of last update

  // No direct relationships with multiple products to keep it simple
  products Product[] // This is the opposite relation field
}

model ProductType {
  id          String   @id @default(uuid()) // Unique ID for each product type
  name        String   @unique              // Name of the product type (e.g., "Electronics", "Jewelry")
  description String?  // Optional description of the product type
  textId      String   // Additional text ID field
  createdAt   DateTime @default(now())      // Timestamp of creation
  updatedAt   DateTime @updatedAt           // Timestamp for last update

  // No direct relationships with multiple products to keep it simple
  products Product[] // This is the opposite relation field
}

model StorageLocation {
  id          String   @id @default(uuid())  // UUID as the primary key
  name        String   @unique               // Name of the storage location
  description String?  // Optional description for the location
  address     String?  // Address for physical storage locations
  capacity    Int?     // Optional capacity
  coordinates Json?    // JSON for geographical coordinates
  createdAt   DateTime @default(now())        // Timestamp for creation
  updatedAt   DateTime @updatedAt            // Timestamp for last update

  // Relationships
  productStorageLocations ProductStorageLocation[] // Many-to-many relationship with Product
  storageBookings        StorageBooking[]         // Relationship with StorageBooking
}

model ProductStorageLocation {
  id                String           @id @default(uuid()) // Unique ID for the relationship record
  productId         String?                              // Foreign key to Product (nullable)
  storageLocationId String?                              // Foreign key to StorageLocation (nullable)
  createdAt         DateTime         @default(now())      // Timestamp for creation
  updatedAt         DateTime         @updatedAt           // Timestamp for last update

  // Foreign key relations
  product           Product?          @relation(fields: [productId], references: [id]) // Foreign key to Product (nullable)
  storageLocation   StorageLocation?  @relation(fields: [storageLocationId], references: [id]) // Foreign key to StorageLocation (nullable)

  @@unique([productId, storageLocationId]) // Ensure a product cannot be in the same location twice
}

model StorageBooking {
  id                String           @id @default(uuid()) 
  name              String                               
  email             String                               
  phone             String                              
  dateOfBirth       DateTime                             
  address           String                               
  zipCodeCity       String                               
  message           String?                              
  storageLocationId String?                              
  idFile            String?                              
  createdAt         DateTime         @default(now())      
  updatedAt         DateTime         @updatedAt     

  // Relations
  storageLocation   StorageLocation?  @relation(fields: [storageLocationId], references: [id]) // Foreign key to StorageLocation (nullable)
}
